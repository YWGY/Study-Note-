Node.js(Express) + MongoDB + jwt + tbc

1. install node.js
http://nodejs.org/dist/v0.6.1/node-v0.6.1.msi 

cmd 
node -v to know the version of node

2. Express 
http://www.expressjs.com.cn/
a. npm install express-generator -g (to install the global)

b. express myapp(myapp is the name of my project)

c. cd myapp
npm install
npm init 
set DEBUG = myapp & npm start (to start the web server)

d. open http://localhost:3000/ to see the app

3. Express structure 
It can be seen as follows:
------------------------------------------------
myapp
    bin 
    node_modules
    public (src````everything)
        images 
        JavaScript
        stylesheets
    routes
        index.js
        users.js
    views
        error.jade
        index.jade
        layout.jade
    app.js
    package.json
-------------------------------------------------
explain: 

app.js is the start-up file of project, it main includes the public function 
www file is the entrence file of this project
views is the mode file of the project
!!!!!!!!!!jade can be changed to ejs (jade is hard to use)

4. install MongoDB
http://www.mongodb.org/downloads
change the environment path everything````

5. use MongoDB in the node project
cd to myapp, npm install mongoose -save
in the app.js:
var mongoose = require('mongoose');
mongoose.connect('mongodb://localhost/myDB')  connect to local database 
build the schemas folder, then build the user.js file

 1 var mongoose = require('mongoose');
 2 
 3 //申明一个mongoons对象
 4 var UsersSchema = new mongoose.Schema({
 5     name: String,
 6     paw: String,
 7     meta: { 
 8         createAt: {
 9             type: Date,
10             default: Date.now()
11         },
12         updateAt: {
13             type: Date,
14             default: Date.now()
15         }
16     }
17 })
18 
19 //每次执行都会调用,时间更新操作
20 UsersSchema.pre('save', function(next) {
21     if(this.isNew) {
22         this.meta.createAt = this.meta.updateAt = Date.now();
23     }else {
24         this.meta.updateAt = Date.now();
25     }
26 
27     next();
28 })
29 
30 //查询的静态方法
31 UsersSchema.statics = {
32     fetch: function(cb) { //查询所有数据
33         return this
34           .find()
35           .sort('meta.updateAt') //排序
36           .exec(cb) //回调
37     },
38     findById: function(id, cb) { //根据id查询单条数据
39         return this
40           .findOne({_id: id})          
41           .exec(cb)
42     }
43 }
44 
45 //暴露出去的方法
46 module.exports = UsersSchema

build the modules folder, then build users.js file 
1 var mongoose = require('mongoose')
2 var UsersSchema = require('../schemas/users') //拿到导出的数据集模块
3 var Users = mongoose.model('Users', UsersSchema) // 编译生成Movie 模型
4 
5 module.exports = Users

add route controller in the users.js under routes folder
 1 var express = require('express');
 2 var mongoose = require('mongoose');//导入mongoose模块
 3 
 4 var Users = require('../modules/users');//导入模型数据模块
 5 
 6 var router = express.Router();
 7 
 8 /* GET users listing. */
 9 router.get('/', function(req, res, next) {
10   res.send('respond with a resource');
11 });
12 
13 //查询所有用户数据
14 router.get('/users', function(req, res, next) {
15     Users.fetch(function(err, users) {
16         if(err) {
17             console.log(err);
18         }        
19         res.render('users',{title: '用户列表', users: users})  //这里也可以json的格式直接返回数据res.json({data: users});
20     })
21 })
22 module.exports = router;

add user.jade under the views folder
1 extends layout
2 
3 block content
4   h1= title //jade取值方式
5   ul
6     each user in users //jade模版的遍历方式
7       li
8         h4 #{user.name}    
9         span #{user.paw}

open the address http://localhost:3000/users/users 